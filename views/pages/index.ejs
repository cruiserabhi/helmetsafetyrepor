<!-- views/pages/index.ejs -->

<!DOCTYPE html>
<html lang="en">
<head>
    <% include ../partials/head %>
	<style>
	h5,h6,h3 { display: inline; } 
	ul, li{
	margin:0;
	padding:0 0 0 15px;    
	}
	.column{
    float: left;
    margin: 0 20px 0 0;
	}
	canvas {
		padding-left: 0;
		padding-right: 0;
		margin-left: auto;
		margin-right: auto;
		display: block;
	}
	</style>
	<meta http-equiv="cache-control" content="max-age=0" />
	<meta http-equiv="cache-control" content="no-cache" />
	<meta http-equiv="expires" content="0" />
	<meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
	<meta http-equiv="pragma" content="no-cache" />
	<link rel="stylesheet" href="../../stylesheets/sheet.css">
	<link rel="stylesheet" href="https://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css">
</head>
<body class="container" onload="Test1();">
    <header>
        <% include ../partials/header %>
    </header>

    <main>
        <div class="jumbotron">
            <h1>Worker Safety</h1>
        </div>
		<div class="topnav" id="myTopnav">
			<a href="./index">Dashboard</a>
			<a href="./history">History</a>
			<a href="javascript:void(0);" class="icon" onclick="myFunction()">&#9776;</a>
		</div>

		<div data-role="panel" id="workerpanel" data-theme="a" data-display="reveal"></div>
		<div id="map"></div>
		</br>
		<canvas id="myCanvas" width="700" height="700"></canvas>
		<div data-role="content" id="home"> 
		  <h4 style="float: left; width: 50%;">Below Employees have just checked in the Premises</h4>
		  <h4 style="float: right; width: 50%; text-align: right;">Employee below has just now taken off his/her safety helmet</h4> 
		  <br style="clear:both;">
		  <ul style="width:200px;float:left;display: inline-block;padding:5px" data-role="listview" id="listView1" data-inset="true"></ul> 
		  <ul style="width:200px;float:right;display: inline-block;padding:5px" data-role="listview" id="listView2" data-inset="true"></ul>
		  <br style="clear:both;">
		</div>
    </main> 
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCQI7WEFjkev1SR4yTObVh0Hs8zb-0jkLc&v=3.exp"></script>
<script src="../../javascripts/gmaps.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
<script src="../../javascripts/script.js"></script>   
<script src="https://cdn.socket.io/socket.io-1.4.5.js"></script>
<script src="https://code.jquery.com/jquery-1.11.3.min.js"></script>
<script src="https://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js"></script>
<script>
    var canvas = document.getElementById('myCanvas');
    var context = canvas.getContext('2d');

	var Red_Marker = function () {
		this.Sprite = new Image();
		this.Sprite.src = ("/images/s.png")
		this.Width = 32;
		this.Height = 32;
		this.XPos = 0;
		this.YPos = 0;
	}
	var rmarker = new Red_Marker();

	var Blue_Marker = function () {
		this.Sprite = new Image();
		this.Sprite.src = ("/images/d.png")
		this.Width = 32;
		this.Height = 32;
		this.XPos = 0;
		this.YPos = 0;
	}
	var bmarker = new Blue_Marker();

	/*	ZoneWise distribution of coordinates */
	var zone_loc = {
		"A": [{x:0+32,y:0+32}   , {x:100,y:100}],
		"B": [{x:100,y:0+32} , {x:200,y:200}],
		"C": [{x:200,y:0+32} , {x:300,y:300}],
		"D": [{x:300,y:0+32} , {x:400,y:400}],
		"E": [{x:400,y:0+32} , {x:500,y:500}],
		"F": [{x:500,y:0+32} , {x:600,y:600}],
		"G": [{x:600,y:0+32} , {x:700-32,y:700-32}]
	};

	function randomIntFromInterval(min,max)
	{
		return Math.floor(Math.random()*(max-min+1)+min);
	}

	var ZoneClicked = function (zone, status) 
	{ 
	    Test1();
	    console.log("ZONE: "+ zone);
	    console.log("ZONE X1: "+ zone_loc[zone][0].x);
	    console.log("ZONE X2: "+ zone_loc[zone][1].x);
	    console.log("ZONE Y1: "+ zone_loc[zone][0].y);
	    console.log("ZONE Y2: "+ zone_loc[zone][1].y);

        var xAxis = randomIntFromInterval(zone_loc[zone][0].x, zone_loc[zone][1].x);
        var yAxis = randomIntFromInterval(zone_loc[zone][0].y, zone_loc[zone][1].y);

	    console.log("xAxis: " + xAxis + " yAxis: " + yAxis);
		
		var rect = canvas.getBoundingClientRect();
		var mouseXPos = (xAxis);
		var mouseYPos = (yAxis);
		
		var marker = ((status == 0) ? (rmarker) : (bmarker)); 
		marker.XPos = mouseXPos - (32/2);
		marker.YPos = mouseYPos - (32);
		context.globalCompositeOperation='destination-over';
		context.drawImage(marker.Sprite, marker.XPos, marker.YPos, marker.Width, marker.Height);

        var markerText = "Postion (X:" + marker.XPos + ", Y:" + marker.YPos;

        // Draw a simple box so you can see the position
        var textMeasurements = context.measureText(markerText);
        context.fillStyle = "#666";
        context.globalAlpha = 0.7;
        context.fillRect(marker.XPos - (textMeasurements.width / 2), marker.YPos - 15, textMeasurements.width, 20);
        context.globalAlpha = 1;

        // Draw position above
        context.fillStyle = "#000";
        context.fillText(markerText, marker.XPos, marker.YPos);
	}

    function Test1() 
    {
	    context.clearRect(0, 0, 700, 700);
		var img1 = new Image();
		img1.src = '/images/National_Gallery_1st_floor_plan.png';
        //drawing of the test image - img1
        img1.onload = function () {
            context.drawImage(img1, 0, 0, 700, 700);
        };
    }

	var mouseClicked = function (mouse) {
		// Get corrent mouse coords
		var rect = canvas.getBoundingClientRect();
		var mouseXPos = (mouse.x - rect.left);
		var mouseYPos = (mouse.y - rect.top);

		var Marker = function () {
			this.Sprite = new Image();
			this.Sprite.src = "/images/d.png"
			this.Width = 32;
			this.Height = 32;
			this.XPos = mouseXPos - (32/2);
			this.YPos = mouseYPos - (32);
		}

		var marker = new Marker();
		context.drawImage(marker.Sprite, marker.XPos, marker.YPos, marker.Width, marker.Height);

        var markerText = "Postion (X:" + marker.XPos + ", Y:" + marker.YPos;

        // Draw a simple box so you can see the position
        var textMeasurements = context.measureText(markerText);
        context.fillStyle = "#666";
        context.globalAlpha = 0.7;
        context.fillRect(marker.XPos - (textMeasurements.width / 2), marker.YPos - 15, textMeasurements.width, 20);
        context.globalAlpha = 1;

        // Draw position above
        context.fillStyle = "#000";
        context.fillText(markerText, marker.XPos, marker.YPos);
	}

	// Add mouse click event listener to canvas
	canvas.addEventListener("mousedown", mouseClicked, false);

	/* Toggle between adding and removing the "responsive" class to topnav when the user clicks on the icon */
	function myFunction() {
		var x = document.getElementById("myTopnav");
		if (x.className === "topnav") {
			x.className += " responsive";
		} else {
			x.className = "topnav";
		}
	}
	var worker_timer = {};

	$("#listView1").on("click", "li", function() {
		var projIndex = $(this).text();
		console.log(projIndex)

		var worker = worker_timer[projIndex];
		var helmet = ((worker.helmet == 0) ? '</br>Worker is not wearing his helmet' : '</br>Worker is wearing his helmet now');
		var s = "<h2>Worker Details</h2></br></br><p>The Employee ID of current worker is :<b>"+ worker.userID + "</b>. </br>Worker today checked in at :<b>" 
				+ worker.datetime + ".</p>";

		$('#workerpanel').html(s);
        $('#workerpanel').panel('open');
	});

	$("#listView2").on("click", "li", function() {
		var projIndex = $(this).text();
		console.log(projIndex)

		var worker = worker_timer[projIndex];
		var helmet = ((worker.helmet == 0) ? '</br>Worker is not wearing his helmet' : '</br>Worker is wearing his helmet now');
		var s = "<h2>Worker Details</h2></br></br><p>The Employee ID of current worker is :<b>"+ worker.userID + "</b>. </br>Worker today removed helmet at :<b>" 
				+ worker.datetime + "</b>. " + helmet + "</br>. Worker is in Zone: <b>" + worker.zone + "</b>" + ".</p>";

		$('#workerpanel').html(s);
        $('#workerpanel').panel('open');
	});

  function showAlert (userID)
  {
      console.log("Timer ID Fired: " + worker_timer[userID].alertTimerId);
      worker_timer[userID].helmet = 0;
	  var id = $('li a[id='+userID+']').attr('id');
  	  console.log("LI Item Anchor: " + id);
	  $('li a[id='+userID+']').css("background", "#FB2B05");
  }

  function addUserAttendData(msg) 
  {
		var $li = $("<li>").attr("data-filtertext",msg.userID).appendTo("#listView1");
		$("<a>").attr("href","#")
				.attr("id",msg.userID)
				.text(msg.userID)
				.appendTo($li)
				.css("background", "#F68D78");
        $("#listView1").listview('refresh')
		var alertTimerId = setTimeout(showAlert.bind(this,msg.userID), 5000 );
		console.log("Timer ID Created: " + alertTimerId);

		var worker_data = {};
		worker_data.userID = msg.userID;
		worker_data.datetime = msg.datetime;
		worker_data.alertTimerId = alertTimerId;
		worker_data.helmet = 0;
		worker_data.zone = "";
		worker_timer[msg.userID] = worker_data;
  } 

  function addUserHelmetData(msg) 
  {
		var $li = $("<li>").attr("data-filtertext",msg.userID).appendTo("#listView2");
		$("<a>").attr("href","#")
				.attr("id",msg.userID)
				.text(msg.userID)
				.appendTo($li)
				.css("background", "#F68D78");
        $("#listView2").listview('refresh')
	  if(worker_timer[msg.userID].hasOwnProperty("helmet"))
			worker_timer[msg.userID].helmet = msg.helmetstatus;
	  if(worker_timer[msg.userID].hasOwnProperty("zone"))
	  {
		worker_timer[msg.userID].zone = msg.zone;
	    ZoneClicked(msg.zone,msg.helmetstatus);
	  }
  } 

  console.log("PORT :"+ "<%= port %>" );         
  //var iosocket = io.connect('http://' + 'localhost' + ':' + '<%= port %>');
  //iosocket.on('connect', function (data) {
  //        iosocket.emit('storeClientInfo', { customId: "<%= port %>"  });
  //});
  var socket = io();
  socket.on('UserInfo', function(msg){
    console.log("\nUser Status Received: " + msg.userID + "-" + msg.datetime);
	addUserAttendData(msg);
  });
  socket.on('UserHelmetInfo', function(msg){
    console.log("\nUser Helmet Status Received: " + msg.userID + "-" + msg.datetime+ "-" + msg.helmetstatus);
	if(msg.helmetstatus == 0)
		addUserHelmetData(msg);
    else
	{
	  if(worker_timer[msg.userID].hasOwnProperty("helmet"))
			worker_timer[msg.userID].helmet = msg.helmetstatus;
	  if(worker_timer[msg.userID].hasOwnProperty("zone"))
	  {
		worker_timer[msg.userID].zone = msg.zone;
	    ZoneClicked(msg.zone,msg.helmetstatus);
	  }

	  var id = $('li a[id='+msg.userID+']').attr('id');
  	  console.log("LI Item Anchor: " + id);
	  $('li a[id='+msg.userID+']').css("background", "#ABF794");        
	}
  });
  socket.on('UserHelmetInfoTracking', function(msg){
    console.log("\nUser Helmet Status Received: " + msg.userID + "-" + msg.datetime+ "-" + msg.helmetstatus);
	if(msg.helmetstatus == 0)
		addUserHelmetData(msg);
    else
	{
	  if(worker_timer[msg.userID].hasOwnProperty("helmet"))
			worker_timer[msg.userID].helmet = msg.helmetstatus;
	  if(worker_timer[msg.userID].hasOwnProperty("zone"))
		worker_timer[msg.userID].zone = msg.zone;

	  var id = $('li a[id='+msg.userID+']').attr('id');
  	  console.log("LI Item Anchor: " + id);
	  $('li a[id='+msg.userID+']').css("background", "#ABF794");        
	}
	if(msg.helmetstatus == 0)
		traceroute(msg.lat , msg.long, "#FB2B05",0);
	else
		traceroute(msg.lat , msg.long, "#ABF794",1);
  });
</script> 

</body>
</html>